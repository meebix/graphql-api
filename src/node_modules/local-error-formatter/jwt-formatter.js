/**
 * Format the error according to JsonWebToken (JWT)
 *
 * @function
 * @param {Object} err - Error from JsonWebToken (JWT)
 * @returns {Object} - Formatted error object to be passed to formatError
 */
function jwtError(err) {
  // Defaults are set to fit the majority of use cases
  const error = {
    level: 'warn',
    info: undefined,
    message: err.message,
    statusCode: 400,
    jsonResponse: {
      status: 'fail',
      name: err.name,
      message: err.message,
      data: null,
    },
  };

  switch (err.message) {
    case 'jwt expired':
      error.jsonResponse.data = { jwt: 'jwt expired' };
      return error;
    case 'jwt malformed':
      error.jsonResponse.data = { jwt: 'jwt malformed' };
      return error;
    case 'jwt signature is required':
    case 'jwt must be provided':
      error.jsonResponse.data = { jwt: 'jwt missing' };
      return error;
    case 'invalid signature':
      error.jsonResponse.data = { jwt: 'jwt invalid signature' };
      return error;
    default:
      return error;
  }
}

module.exports = jwtError;
