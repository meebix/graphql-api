const Error = require('verror');

/**
 * Application error formatter
 *
 * @description Formats application errors according to type
 * @function
 * @param {Object} error - Express.js err
 * @returns {Object} - Formatted error object to be passed to local-logger
 */
function formatError(error) {
  const statusCode = error.statusCode || 500;
  const validationError = error.name === 'SequelizeValidationError';

  let jsonResponse;
  let level;
  let addStackTrace;

  // Handling manual 400's and Sequelize validation errors
  if (statusCode.toString().startsWith('4') || validationError) {
    level = 'warn';
    addStackTrace = false;

    jsonResponse = {
      status: 'fail',
      name: error.name,
      data: error.data || error.errors.reduce((result, obj) => {
        const map = result;
        map[obj.path] = obj.message;
        return map;
      }, {}),
    };
  } else { // If neither of the above, throw a generic 500 error
    level = 'error';
    addStackTrace = true;

    jsonResponse = {
      status: 'error',
      name: error.name,
      message: error.message,
    };
  }

  return new Error({
    name: error.name,
    info: {
      statusCode,
      jsonResponse,
      level,
      addStackTrace,
    },
  }, error.message);
}

module.exports = formatError;
