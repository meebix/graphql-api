/**
 * Format the error according to Sequelize
 *
 * @function
 * @param {Object} err - Error from Sequelize
 * @returns {Object} - Formatted error object to be passed to formatError
 */
function sequelizeError(e) {
  const err = e;

  // Set a default statusCode for uncaught errors
  err.statusCode = err.statusCode ? err.statusCode : 500;

  // Defaults are set to fit the majority of use cases
  const error = {
    level: 'warn',
    info: undefined,
    message: err.message,
    statusCode: err.statusCode,
    jsonResponse: {
      status: 'fail',
      name: err.name,
      data: err.errors.reduce((result, obj) => {
        const map = result;
        map[obj.path] = obj.message;
        return map;
      }, {}),
    },
  };

  switch (err.statusCode.toString()) {
    case '400':
      return error;
    default:
      error.level = 'error';
      error.jsonResponse.status = 'error';
      error.jsonResponse.data = null;
      error.jsonResponse.message = err.message;

      return error;
  }
}

module.exports = sequelizeError;

