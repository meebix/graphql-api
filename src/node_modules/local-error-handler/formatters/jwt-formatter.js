const objectPath = require('object-path');

/**
 * Format the error according to JsonWebToken (JWT)
 *
 * @function
 * @param {Object} err - Error from JsonWebToken (JWT)
 * @returns {Object} - Formatted error object to be passed to formatError
 */
function jwtError(err) {
  // Set a default properties
  const statusCode = objectPath.get(err, 'statusCode', '500');
  const code = objectPath.get(err, 'code', 'SERVER_ERROR');
  const source = objectPath.get(err, 'source', undefined);
  const name = objectPath.get(err, 'name', undefined);
  const expiredAt = objectPath.get(err, 'expiredAt', undefined);

  if (source) {
    objectPath.set(source, 'path', err.source.path);
  }

  // Defaults are set to fit the majority of use cases
  const error = {
    level: 'warn',
    message: err.message,
    statusCode,
    jsonResponse: [{
      statusCode,
      message: err.message,
      code,
      source,
      meta: { name, expiredAt },
    }],
  };

  switch (err.message) {
    case 'jwt expired':
    case 'jwt malformed':
    case 'jwt signature is required':
    case 'jwt must be provided':
    case 'invalid signature':
      return error;
    default:
      error.level = 'error';

      return error;
  }
}

module.exports = jwtError;
