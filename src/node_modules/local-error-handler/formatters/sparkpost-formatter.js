const objectPath = require('object-path');

/**
 * Prepares errors array for the JSON response
 *
 * @description Sets formatted errors on jsonResponse
 * @function
 * @param {Object} err - The error object from Sparkpost
 * @param {String} statusCode - Status code
 * @param {Array} errors - The errors returned from Sparkpost
 * @returns {Array} - Formatted errors for error response
 */
const setErrors = (err, statusCode, errors) => {
  const result = [];

  errors.forEach((error) => {
    const code = objectPath.get(error, 'code', 'SPARKPOST_ERROR');

    result.push({
      statusCode,
      message: error.description || error.message,
      code,
    });
  });

  return result;
};

/**
 * Format the error according to SparkPost
 *
 * @function
 * @param {Object} err - Error from SparkPost
 * @returns {Object} - Formatted error object to be passed to formatError
 */
function sparkPostError(err) {
  // Set a default properties
  const statusCode = objectPath.get(err, 'statusCode', '500');

  // Defaults are set to fit the majority of use cases
  const error = {
    level: 'warn',
    message: err.message,
    statusCode,
    jsonResponse: setErrors(err, statusCode, err.errors),
  };

  switch (err.statusCode.toString()) {
    case '400':
    case '401':
    case '403':
    case '404':
    case '405':
    case '409':
    case '415':
    case '422':
      return error;
    case '429':
    case '500':
    case '503':
    default:
      error.level = 'error';

      return error;
  }
}

module.exports = sparkPostError;
