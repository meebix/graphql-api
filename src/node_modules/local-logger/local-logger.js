const bunyan = require('bunyan');
const PrettyStream = require('bunyan-prettystream');
const config = require('config');
const path = require('path');

const prettyStdOut = new PrettyStream();
const ringbuffer = new bunyan.RingBuffer({ limit: 100 });

const determineLevel = statusCode => (statusCode.toString().startsWith('5') ? 'error' : 'warn');

const logger = bunyan.createLogger({
  name: 'teach-learn-api',
  level: (config.logger && config.logger.level) || 'info',
  serializers: {
    err: bunyan.stdSerializers.err,
    req(req) {
      if (!req) {
        return (false);
      }

      return ({
        query: req.query,
        params: req.params,
        method: req.method,
        url: req.url,
        headers: req.headers,
        httpVersion: req.httpVersion,
        body: req.body,
      });
    },
    res(res) {
      if (!res) {
        return (false);
      }

      return ({
        statusCode: res.statusCode,
        headers: res._headers,
      });
    },
  },
  streams: [
    {
      stream: prettyStdOut.pipe(process.stdout),
      level: 'debug',
    },
    {
      type: 'rotating-file',
      path: path.join(process.cwd(), '/logs/app.log'),
      period: '1d', // daily rotation
      count: 4, // keep 4 back copies
    },
    {
      level: 'trace',
      type: 'raw', // use 'raw' to get raw log record objects
      stream: ringbuffer,
    },
  ],
});

// Expose the ringbugger for when we need it
logger.ringbuffer = ringbuffer;

// Utility for logging warn vs. error
logger.determineLevel = determineLevel;

module.exports = logger;
