const SparkPost = require('sparkpost');
const logger = require('local-logger');
const config = require('config');

const emailClient = new SparkPost(process.env.SPARKPOST_KEY);

/**
 * Send confirmation email
 *
 * @description Set Sparkpost options; Send email via Sparkpost Email SDK
 * @function
 * @param {Object} user - Information about the user
 * @returns {Promise} - Send mail transmission
 */
function sendConfirmMail(user, callback) {
  return emailClient.transmissions.send({
    campaign_id: 'signup-confirmation',
    metadata: {
      short_id: user.short_id,
    },
    options: {
      skip_suppression: false,
    },
    content: {
      template_id: 'signup-confirmation',
    },
    recipients: [
      {
        address: {
          name: user.first_name,
          email: user.email,
        },
        substitution_data: {
          first_name: user.first_name,
          confirmed_token: user.confirmed_token,
        },
      },
    ],
  })
    .then((data) => {
      logger.info({
        userId: user.short_id,
        data,
      }, 'LOCAL-MAILER: Confirmation email successfully sent');

      if (callback) callback(null, data);
    })
    .catch((err) => {
      logger.error({
        err,
      }, 'LOCAL-MAILER: Confirmation email has not been sent');

      if (callback) callback(err, null);
    });
}

/**
 * Send new user welcome email
 *
 * @description Set Sparkpost options; Send email via Sparkpost Email SDK
 * @function
 * @param {Object} user - Information about the user
 * @returns {Promise} - Send mail transmission
 */
function sendWelcomeMail(user, callback) {
  return emailClient.transmissions.send({
    campaign_id: 'welcome',
    metadata: {
      short_id: user.short_id,
    },
    options: {
      skip_suppression: false,
    },
    content: {
      template_id: 'welcome',
    },
    recipients: [
      {
        address: {
          name: user.first_name,
          email: user.email,
        },
        substitution_data: {
          first_name: user.first_name,
        },
      },
    ],
  })
    .then((data) => {
      logger.info({
        userId: user.short_id,
        data,
      }, 'LOCAL-MAILER: Welcome email successfully sent');

      if (callback) callback(null, data);
    })
    .catch((err) => {
      logger.error({
        err,
      }, 'LOCAL-MAILER: Welcome email has not been sent');

      if (callback) callback(err, null);
    });
}

/**
 * Send reset password email
 *
 * @description Set Sparkpost options; Send email via Sparkpost Email SDK
 * @function
 * @param {Object} user - Information about the user
 * @returns {Promise} - Send mail transmission
 */
function sendResetPasswordMail(user, callback) {
  return emailClient.transmissions.send({
    campaign_id: 'reset-password',
    metadata: {
      short_id: user.short_id,
    },
    options: {
      skip_suppression: false,
    },
    content: {
      template_id: 'reset-password',
    },
    recipients: [
      {
        address: {
          name: user.first_name,
          email: user.email,
        },
        substitution_data: {
          first_name: user.first_name,
          reset_password_token: user.reset_password_token,
        },
      },
    ],
  })
    .then((data) => {
      logger.info({
        userId: user.short_id,
        data,
      }, 'LOCAL-MAILER: Reset password email successfully sent');

      if (callback) callback(null, data);
    })
    .catch((err) => {
      logger.error({
        err,
      }, 'LOCAL-MAILER: Reset password email has not been sent');

      if (callback) callback(err, null);
    });
}

module.exports = {
  sendConfirmMail: config.transactionalEmails ? sendConfirmMail : function noop() {},
  sendWelcomeMail: config.transactionalEmails ? sendWelcomeMail : function noop() {},
  sendResetPasswordMail: config.transactionalEmails ? sendResetPasswordMail : function noop() {},
};
