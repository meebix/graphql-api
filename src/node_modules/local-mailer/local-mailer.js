const SparkPost = require('sparkpost');
const logger = require('local-logger');

// Read docs for using the Sparkpost ENV var here
const emailClient = new SparkPost(process.env.SPARKPOST_KEY);

/**
 * Example documentation.
 * @function
 */
function sendConfirmMail(user) {
  return emailClient.transmissions.send({
    campaign_id: 'signup-confirmation',
    description: 'Confirmation email that is sent to all new users',
    metadata: {
      short_id: user.short_id,
    },
    options: {
      skip_suppression: false,
    },
    content: {
      from: {
        name: 'Make It Count',
        email: 'mike@makeitcount.cc',
      },
      reply_to: 'no-reply@makeitcount.cc',
      subject: 'Please confirm your Make It Count account',
      template_id: 'signup-confirmation',
    },
    recipients: [
      {
        address: {
          name: user.name,
          email: user.email,
        },
        substitution_data: {
          name: user.name,
          confirmed_token: user.confirmed_token,
        },
      },
    ],
  })
  .then((data) => {
    logger.info({
      userId: user.short_id,
      data,
    }, 'MD-MAILER: Confirmation email successfully sent');
  })
  .catch((err) => {
    logger.error({
      err,
    }, 'MD-MAILER: Confirmation email has not been sent due to error');
  });
}

/**
 * Example documentation.
 * @function
 */
function sendResetPasswordMail(user) {
  return emailClient.transmissions.send({
    campaign_id: 'reset-password',
    description: 'Sends users a reset password link',
    metadata: {
      short_id: user.short_id,
    },
    options: {
      skip_suppression: false,
    },
    content: {
      from: {
        name: 'Make It Count',
        email: 'mike@makeitcount.cc',
      },
      reply_to: 'no-reply@makeitcount.cc',
      subject: 'Make It Count reset password information',
      template_id: 'reset-password',
    },
    recipients: [
      {
        address: {
          name: user.name,
          email: user.email,
        },
        substitution_data: {
          name: user.name,
          reset_password_token: user.reset_password_token,
        },
      },
    ],
  })
  .then((data) => {
    logger.info({
      userId: user.short_id,
      data,
    }, 'MD-MAILER: Reset password email successfully sent');
  })
  .catch((err) => {
    logger.error({
      err,
    }, 'MD-MAILER: Reset password email has not been sent due to error');
  });
}

module.exports = {
  sendConfirmMail,
  sendResetPasswordMail,
};
