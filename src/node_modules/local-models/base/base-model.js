const validator = require('local-validator');
const config = require('config');
const knex = require('knex')(config.database);

class Base {
  constructor() {
    this.orm = knex;
  }

  /**
   * Create ORM query connection to a given database model
   *
   * @param {String} model - Database table model to query; Default: 'users'
   * @return {Object} Query instance
   */
  knex(model) {
    return this.orm(model);
  }

  /**
   * Validate user input
   *
   * @param {Object} attributes - User input from req.body
   * @return {Object} Failed validations
   */
  validate(attributes) {
    return new Promise(resolve => resolve(
      validator(attributes, this.validations)),
    );
  }

  /**
   * Format user input
   *
   * @param {Object} attributes - An object of key, value pairs
   * @return {Object} A new object with formatted values
   */
  format(attributes) {
    const result = {};

    Object.keys(attributes).forEach((value) => {
      if (this.formatters[value]) {
        result[value] = this.formatters[value](attributes[value]);
      } else {
        result[value] = attributes[value];
      }
    });

    return new Promise(resolve => resolve(result));
  }
}

module.exports = Base;
