const argon2 = require('argon2');
const generateToken = require('local-generate-token');
const addMinutes = require('date-fns/add_minutes');
const config = require('config');
const knex = require('knex')(config.database);

/**
 * Hash a password
 *
 * @param {Object} instance - A user model instance
 * @param {String} password - The user's password
 * @return {Object} The hashed password and the original user instance
 */
const hashPassword = (instance, password) =>
  argon2.hash(password, { timeCost: 2000, memoryCost: 500 })
    .then(hashedPassword => ({ hashedPassword, user: instance }));

/**
 * Compare passwords and if no match, checks for locked account
 *
 * @param {Object} instance - A user model instance
 * @param {String} password - The user's password
 * @return {Object} A boolean for if there is a match and the original user instance
 */
const comparePassword = async (instance, password) => {
  const user = await knex('users').where({ uuid: instance.uuid }).first().select('password');

  return argon2.verify(user.password, password)
    .then(isMatch => ({ isMatch, user: instance }));
};

/**
 * Determines if an account has been locked due to failed login attempts
 * or failed security question attempts
 *
 * @param {Object} instance - A user model instance
 * @return {Object} If the account is locked and the user {locked, user}
 */
const checkForLockedAccount = (instance) => {
  if (config.auth.lockable === false) return { locked: false, user: null };
  if (instance.account_locked) return { locked: true, user: null };

  if (
    instance.login_attempts === config.auth.lockable.maxAttempts ||
    instance.question_attempts === config.auth.lockable.maxAttempts
  ) {
    return this
      .knex('users')
      .where({ uuid: instance.uuid })
      .update({
        account_locked: true,
        unlock_account_code: generateToken(),
        unlock_account_expires: addMinutes(
          new Date(),
          config.auth.tokens.unlockAccount.expireTime,
        ),
      })
      .then(() =>
        this
          .knex('users')
          .where({ uuid: instance.uuid })
          .first()
          .then(lockedAccount => ({ locked: true, user: lockedAccount })));
  }

  return { locked: false, user: instance };
};

module.exports = {
  hashPassword,
  comparePassword,
  checkForLockedAccount,
};
