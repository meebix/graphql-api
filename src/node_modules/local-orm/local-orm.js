/* eslint no-await-in-loop: 0 */

const config = require('config');
const validator = require('validate.js');
const ApiError = require('local-api-error');
const QueryBuilder = require('knex/lib/query/builder');
const knex = require('knex')(config.database);
const { validations, formatters } = require('local-models');
const { setErrors } = require('./local-orm-helpers');

/**
 * Insert new attributes for given model
 *
 * @param {Object} attributes - Values from user input
 * @return {Object} The newly created model entry
 */
QueryBuilder.prototype.save = function save(attributes) {
  const table = this._single.table;
  const modelValidations = validations[table];
  const modelFormatters = formatters[table];

  return this.validate(attributes, modelValidations)
    .then(() => this.format(attributes, modelFormatters))
    .then(() => this.insert(this._single.attributes || attributes))
    .then(value => knex(table).where({ id: value }).first());
};

/**
 * Validate attributes
 *
 * @param {Object} attributes - Values from user input
 * @param {Object} constraints - A set of validation constraints for the model fields
 * @return {Object} The QueryBuilder class
 */
QueryBuilder.prototype.validate = function validate(attributes, constraints) {
  if (!constraints) return this;

  const values = this._single.attributes || attributes;
  const validationErrors = validator(values, constraints);

  if (validationErrors) {
    const validationError = {
      name: 'ValidationError',
      message: 'User input has failed validations',
      statusCode: '400',
      errors: setErrors(validationErrors),
    };

    throw new ApiError(validationError);
  }

  this._single.attributes = attributes;
  return this;
};

/**
 * Format attributes
 *
 * @param {Object} attributes - An object of key, value pairs
 * @param {Object} modifiers - A set of formatter functions for the model fields
 * @return {Object} The QueryBuilder class
 */
QueryBuilder.prototype.format = async function format(attributes, modifiers) {
  if (!modifiers) return this;

  const values = this._single.attributes || attributes;
  const keys = Object.keys(values);
  const formatted = {};

  for (let i = 0; i < keys.length; i++) {
    const value = keys[i];

    if (modifiers[value]) {
      formatted[value] = await modifiers[value](attributes[value]);
    } else {
      formatted[value] = attributes[value];
    }
  }

  this._single.attributes = formatted;
  return this;
};

knex.queryBuilder = () => new QueryBuilder(knex.client);

module.exports = knex;
