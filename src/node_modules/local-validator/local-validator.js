const validate = require('validate.js');
const ApiError = require('local-errors');

/**
 * Prepares errors array for the JSON response
 *
 * @description Sets formatted errors on jsonResponse
 * @function
 * @param {Array} errors - The errors returned from Sparkpost
 * @returns {Array} - Formatted errors for error response
 */
const setErrors = (errors) => {
  const result = [];
  const entries = Object.entries(errors);

  entries.forEach((entry) => {
    const key = entry[0];
    const values = entry[1];

    values.forEach((value) => {
      result.push({
        statusCode: '400',
        message: value,
        code: 'VALIDATION_FAILED',
        source: { field: key },
      });
    });
  });

  return result;
};

/**
 * Runs validation against user inputs
 *
 * @description Runs validations; throws error on validation fail
 * @function
 * @param {Object} attributes - The attributes received on req.body from user input
 * @param {Object} constraints - A set of validations for each user input key
 * @returns {Object} - Validation failures
 */
const validator = (attributes, constraints) => {
  const validationErrors = validate(attributes, constraints);

  if (validationErrors) {
    const validationError = {
      name: 'ValidationError',
      message: 'User input has failed validations',
      statusCode: '400',
      errors: setErrors(validationErrors),
    };

    throw new ApiError(validationError);
  }

  return validationErrors;
};

module.exports = validator;
