const Error = require('verror');

/**
 * Example documentation.
 * @function
 */
function appError(error) {
  const statusCode = error.jse_info.statusCode;
  const statusText = error.jse_info.statusText;
  const validationErrors = error.jse_info.data;

  const jsonResponse = () => {
    // Check for NOT statusCode 4xx or 404 specifically
    if (!statusCode.toString().startsWith('4') || statusCode.toString() === '404') {
      return {
        status: statusText,
        message: error.message,
        code: error.name,
        data: [],
      };
    }

    return {
      status: statusText,
      message: error.message,
      code: error.name,
      data: (() => {
        const obj = {};

        Object.keys(validationErrors).forEach((key) => {
          obj[key] = validationErrors[key];
        });

        return obj;
      })(),
    };
  };

  return new Error({
    name: error.name,
    info: {
      statusCode,
      statusText,
      jsonResponse,
      stackTrace: error.stack,
    },
  }, error.message);
}

/**
 * Example documentation.
 * @function
 */
function sequelizeError(error) {
  const statusCode = (error.errors && error.errors.length) ? 400 : 500;
  const statusText = (error.errors && error.errors.length) ? 'fail' : 'error';

  const jsonResponse = () => {
    if (statusCode !== 400) {
      return {
        status: statusText,
        message: error.message,
        code: error.name,
        data: [],
      };
    }

    return {
      status: statusText,
      message: error.message,
      code: error.name,
      data: (() => {
        const obj = {};

        error.errors.forEach((e) => {
          obj[e.path] = e.message;
        });

        return obj;
      })(),
    };
  };

  return new Error({
    name: error.name,
    info: {
      statusCode,
      statusText,
      jsonResponse,
      stackTrace: error.stack,
    },
  }, error.message);
}

/**
 * Example documentation.
 * @function
 */
function jwtError(error) {
  const statusCode = 401;
  const statusText = 'fail';

  const jsonResponse = () => ({
    status: statusText,
    message: error.message,
    code: error.name,
    data: { jwt: error.message },
  });

  return new Error({
    name: error.name,
    info: {
      statusCode,
      statusText,
      jsonResponse,
      expiredAt: error.expiredAt,
      stackTrace: error.stack,
    },
  }, error.message);
}

/**
 * Example documentation.
 * @function
 */
function determineError(error) {
  const errorName = error.name;

  switch (true) {
    case (errorName.includes('Sequelize')):
      return sequelizeError(error);
    case (errorName.includes('TokenExpiredError') || errorName.includes('JsonWebTokenError')):
      return jwtError(error);
    default:
      return appError(error);
  }
}

module.exports = determineError;
