// Code generated by Prisma (prisma@1.30.0). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from 'graphql';
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model,
} from 'prisma-client-lib';
import { typeDefs } from './prisma-schema';

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  role: (where?: RoleWhereInput) => Promise<boolean>;
  securityQuestion: (where?: SecurityQuestionWhereInput) => Promise<boolean>;
  securityQuestionAnswer: (
    where?: SecurityQuestionAnswerWhereInput
  ) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
  userAccount: (where?: UserAccountWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  role: (where: RoleWhereUniqueInput) => RolePromise;
  roles: (
    args?: {
      where?: RoleWhereInput;
      orderBy?: RoleOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Role>;
  rolesConnection: (
    args?: {
      where?: RoleWhereInput;
      orderBy?: RoleOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => RoleConnectionPromise;
  securityQuestion: (
    where: SecurityQuestionWhereUniqueInput
  ) => SecurityQuestionPromise;
  securityQuestions: (
    args?: {
      where?: SecurityQuestionWhereInput;
      orderBy?: SecurityQuestionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<SecurityQuestion>;
  securityQuestionsConnection: (
    args?: {
      where?: SecurityQuestionWhereInput;
      orderBy?: SecurityQuestionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => SecurityQuestionConnectionPromise;
  securityQuestionAnswer: (
    where: SecurityQuestionAnswerWhereUniqueInput
  ) => SecurityQuestionAnswerPromise;
  securityQuestionAnswers: (
    args?: {
      where?: SecurityQuestionAnswerWhereInput;
      orderBy?: SecurityQuestionAnswerOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<SecurityQuestionAnswer>;
  securityQuestionAnswersConnection: (
    args?: {
      where?: SecurityQuestionAnswerWhereInput;
      orderBy?: SecurityQuestionAnswerOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => SecurityQuestionAnswerConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<User>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnectionPromise;
  userAccount: (where: UserAccountWhereUniqueInput) => UserAccountPromise;
  userAccounts: (
    args?: {
      where?: UserAccountWhereInput;
      orderBy?: UserAccountOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<UserAccount>;
  userAccountsConnection: (
    args?: {
      where?: UserAccountWhereInput;
      orderBy?: UserAccountOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserAccountConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createRole: (data: RoleCreateInput) => RolePromise;
  updateRole: (
    args: { data: RoleUpdateInput; where: RoleWhereUniqueInput }
  ) => RolePromise;
  updateManyRoles: (
    args: { data: RoleUpdateManyMutationInput; where?: RoleWhereInput }
  ) => BatchPayloadPromise;
  upsertRole: (
    args: {
      where: RoleWhereUniqueInput;
      create: RoleCreateInput;
      update: RoleUpdateInput;
    }
  ) => RolePromise;
  deleteRole: (where: RoleWhereUniqueInput) => RolePromise;
  deleteManyRoles: (where?: RoleWhereInput) => BatchPayloadPromise;
  createSecurityQuestion: (
    data: SecurityQuestionCreateInput
  ) => SecurityQuestionPromise;
  updateSecurityQuestion: (
    args: {
      data: SecurityQuestionUpdateInput;
      where: SecurityQuestionWhereUniqueInput;
    }
  ) => SecurityQuestionPromise;
  updateManySecurityQuestions: (
    args: {
      data: SecurityQuestionUpdateManyMutationInput;
      where?: SecurityQuestionWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertSecurityQuestion: (
    args: {
      where: SecurityQuestionWhereUniqueInput;
      create: SecurityQuestionCreateInput;
      update: SecurityQuestionUpdateInput;
    }
  ) => SecurityQuestionPromise;
  deleteSecurityQuestion: (
    where: SecurityQuestionWhereUniqueInput
  ) => SecurityQuestionPromise;
  deleteManySecurityQuestions: (
    where?: SecurityQuestionWhereInput
  ) => BatchPayloadPromise;
  createSecurityQuestionAnswer: (
    data: SecurityQuestionAnswerCreateInput
  ) => SecurityQuestionAnswerPromise;
  updateSecurityQuestionAnswer: (
    args: {
      data: SecurityQuestionAnswerUpdateInput;
      where: SecurityQuestionAnswerWhereUniqueInput;
    }
  ) => SecurityQuestionAnswerPromise;
  updateManySecurityQuestionAnswers: (
    args: {
      data: SecurityQuestionAnswerUpdateManyMutationInput;
      where?: SecurityQuestionAnswerWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertSecurityQuestionAnswer: (
    args: {
      where: SecurityQuestionAnswerWhereUniqueInput;
      create: SecurityQuestionAnswerCreateInput;
      update: SecurityQuestionAnswerUpdateInput;
    }
  ) => SecurityQuestionAnswerPromise;
  deleteSecurityQuestionAnswer: (
    where: SecurityQuestionAnswerWhereUniqueInput
  ) => SecurityQuestionAnswerPromise;
  deleteManySecurityQuestionAnswers: (
    where?: SecurityQuestionAnswerWhereInput
  ) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => UserPromise;
  updateManyUsers: (
    args: { data: UserUpdateManyMutationInput; where?: UserWhereInput }
  ) => BatchPayloadPromise;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;
  createUserAccount: (data: UserAccountCreateInput) => UserAccountPromise;
  updateUserAccount: (
    args: { data: UserAccountUpdateInput; where: UserAccountWhereUniqueInput }
  ) => UserAccountPromise;
  updateManyUserAccounts: (
    args: {
      data: UserAccountUpdateManyMutationInput;
      where?: UserAccountWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertUserAccount: (
    args: {
      where: UserAccountWhereUniqueInput;
      create: UserAccountCreateInput;
      update: UserAccountUpdateInput;
    }
  ) => UserAccountPromise;
  deleteUserAccount: (where: UserAccountWhereUniqueInput) => UserAccountPromise;
  deleteManyUserAccounts: (
    where?: UserAccountWhereInput
  ) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  role: (
    where?: RoleSubscriptionWhereInput
  ) => RoleSubscriptionPayloadSubscription;
  securityQuestion: (
    where?: SecurityQuestionSubscriptionWhereInput
  ) => SecurityQuestionSubscriptionPayloadSubscription;
  securityQuestionAnswer: (
    where?: SecurityQuestionAnswerSubscriptionWhereInput
  ) => SecurityQuestionAnswerSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
  userAccount: (
    where?: UserAccountSubscriptionWhereInput
  ) => UserAccountSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type SecurityQuestionOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'shortName_ASC'
  | 'shortName_DESC'
  | 'question_ASC'
  | 'question_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC';

export type SecurityQuestionAnswerOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'answer_ASC'
  | 'answer_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC';

export type UserOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'firstName_ASC'
  | 'firstName_DESC'
  | 'lastName_ASC'
  | 'lastName_DESC'
  | 'email_ASC'
  | 'email_DESC'
  | 'password_ASC'
  | 'password_DESC'
  | 'phoneCountryCode_ASC'
  | 'phoneCountryCode_DESC'
  | 'phone_ASC'
  | 'phone_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'deletedAt_ASC'
  | 'deletedAt_DESC';

export type RoleOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC';

export type UserAccountOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'confirmed_ASC'
  | 'confirmed_DESC'
  | 'confirmedCode_ASC'
  | 'confirmedCode_DESC'
  | 'confirmedExpires_ASC'
  | 'confirmedExpires_DESC'
  | 'locked_ASC'
  | 'locked_DESC'
  | 'lockedCode_ASC'
  | 'lockedCode_DESC'
  | 'lockedExpires_ASC'
  | 'lockedExpires_DESC'
  | 'resetPasswordCode_ASC'
  | 'resetPasswordCode_DESC'
  | 'resetPasswordExpires_ASC'
  | 'resetPasswordExpires_DESC'
  | 'loginAttempts_ASC'
  | 'loginAttempts_DESC'
  | 'securityQuestionAttempts_ASC'
  | 'securityQuestionAttempts_DESC'
  | 'lastVisit_ASC'
  | 'lastVisit_DESC'
  | 'ip_ASC'
  | 'ip_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'deletedAt_ASC'
  | 'deletedAt_DESC';

export type MutationType = 'CREATED' | 'UPDATED' | 'DELETED';

export type RoleName = 'USER';

export interface UserCreateOneWithoutUserAccountInput {
  create?: UserCreateWithoutUserAccountInput;
  connect?: UserWhereUniqueInput;
}

export type RoleWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  name?: RoleName;
}>;

export interface SecurityQuestionAnswerCreateWithoutUserAccountInput {
  userSecurityQuestion: SecurityQuestionCreateOneInput;
  answer: String;
}

export interface SecurityQuestionUpsertNestedInput {
  update: SecurityQuestionUpdateDataInput;
  create: SecurityQuestionCreateInput;
}

export interface SecurityQuestionAnswerCreateManyWithoutUserAccountInput {
  create?:
    | SecurityQuestionAnswerCreateWithoutUserAccountInput[]
    | SecurityQuestionAnswerCreateWithoutUserAccountInput;
  connect?:
    | SecurityQuestionAnswerWhereUniqueInput[]
    | SecurityQuestionAnswerWhereUniqueInput;
}

export interface SecurityQuestionAnswerUpdateInput {
  userAccount?: UserAccountUpdateOneRequiredWithoutSecurityQuestionsInput;
  userSecurityQuestion?: SecurityQuestionUpdateOneRequiredInput;
  answer?: String;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface SecurityQuestionAnswerSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: SecurityQuestionAnswerWhereInput;
  AND?:
    | SecurityQuestionAnswerSubscriptionWhereInput[]
    | SecurityQuestionAnswerSubscriptionWhereInput;
  OR?:
    | SecurityQuestionAnswerSubscriptionWhereInput[]
    | SecurityQuestionAnswerSubscriptionWhereInput;
  NOT?:
    | SecurityQuestionAnswerSubscriptionWhereInput[]
    | SecurityQuestionAnswerSubscriptionWhereInput;
}

export interface RoleCreateInput {
  name: RoleName;
}

export interface SecurityQuestionSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: SecurityQuestionWhereInput;
  AND?:
    | SecurityQuestionSubscriptionWhereInput[]
    | SecurityQuestionSubscriptionWhereInput;
  OR?:
    | SecurityQuestionSubscriptionWhereInput[]
    | SecurityQuestionSubscriptionWhereInput;
  NOT?:
    | SecurityQuestionSubscriptionWhereInput[]
    | SecurityQuestionSubscriptionWhereInput;
}

export interface RoleUpdateInput {
  name?: RoleName;
}

export interface UserAccountUpdateManyMutationInput {
  confirmed?: Boolean;
  confirmedCode?: Int;
  confirmedExpires?: String;
  locked?: Boolean;
  lockedCode?: Int;
  lockedExpires?: String;
  resetPasswordCode?: Int;
  resetPasswordExpires?: String;
  loginAttempts?: Int;
  securityQuestionAttempts?: Int;
  lastVisit?: DateTimeInput;
  ip?: String;
  deletedAt?: DateTimeInput;
}

export interface RoleUpdateManyMutationInput {
  name?: RoleName;
}

export type SecurityQuestionAnswerWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface UserAccountCreateWithoutUserInput {
  confirmed?: Boolean;
  confirmedCode?: Int;
  confirmedExpires?: String;
  locked?: Boolean;
  lockedCode?: Int;
  lockedExpires?: String;
  resetPasswordCode?: Int;
  resetPasswordExpires?: String;
  securityQuestions?: SecurityQuestionAnswerCreateManyWithoutUserAccountInput;
  loginAttempts?: Int;
  securityQuestionAttempts?: Int;
  lastVisit?: DateTimeInput;
  ip?: String;
  deletedAt?: DateTimeInput;
}

export interface UserUpdateManyMutationInput {
  firstName?: String;
  lastName?: String;
  email?: String;
  password?: String;
  phoneCountryCode?: String;
  phone?: String;
  deletedAt?: DateTimeInput;
}

export interface UserAccountCreateOneWithoutUserInput {
  create?: UserAccountCreateWithoutUserInput;
  connect?: UserAccountWhereUniqueInput;
}

export interface SecurityQuestionAnswerUpdateManyDataInput {
  answer?: String;
}

export interface SecurityQuestionCreateInput {
  shortName: String;
  question: String;
}

export interface UserAccountWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  user?: UserWhereInput;
  confirmed?: Boolean;
  confirmed_not?: Boolean;
  confirmedCode?: Int;
  confirmedCode_not?: Int;
  confirmedCode_in?: Int[] | Int;
  confirmedCode_not_in?: Int[] | Int;
  confirmedCode_lt?: Int;
  confirmedCode_lte?: Int;
  confirmedCode_gt?: Int;
  confirmedCode_gte?: Int;
  confirmedExpires?: String;
  confirmedExpires_not?: String;
  confirmedExpires_in?: String[] | String;
  confirmedExpires_not_in?: String[] | String;
  confirmedExpires_lt?: String;
  confirmedExpires_lte?: String;
  confirmedExpires_gt?: String;
  confirmedExpires_gte?: String;
  confirmedExpires_contains?: String;
  confirmedExpires_not_contains?: String;
  confirmedExpires_starts_with?: String;
  confirmedExpires_not_starts_with?: String;
  confirmedExpires_ends_with?: String;
  confirmedExpires_not_ends_with?: String;
  locked?: Boolean;
  locked_not?: Boolean;
  lockedCode?: Int;
  lockedCode_not?: Int;
  lockedCode_in?: Int[] | Int;
  lockedCode_not_in?: Int[] | Int;
  lockedCode_lt?: Int;
  lockedCode_lte?: Int;
  lockedCode_gt?: Int;
  lockedCode_gte?: Int;
  lockedExpires?: String;
  lockedExpires_not?: String;
  lockedExpires_in?: String[] | String;
  lockedExpires_not_in?: String[] | String;
  lockedExpires_lt?: String;
  lockedExpires_lte?: String;
  lockedExpires_gt?: String;
  lockedExpires_gte?: String;
  lockedExpires_contains?: String;
  lockedExpires_not_contains?: String;
  lockedExpires_starts_with?: String;
  lockedExpires_not_starts_with?: String;
  lockedExpires_ends_with?: String;
  lockedExpires_not_ends_with?: String;
  resetPasswordCode?: Int;
  resetPasswordCode_not?: Int;
  resetPasswordCode_in?: Int[] | Int;
  resetPasswordCode_not_in?: Int[] | Int;
  resetPasswordCode_lt?: Int;
  resetPasswordCode_lte?: Int;
  resetPasswordCode_gt?: Int;
  resetPasswordCode_gte?: Int;
  resetPasswordExpires?: String;
  resetPasswordExpires_not?: String;
  resetPasswordExpires_in?: String[] | String;
  resetPasswordExpires_not_in?: String[] | String;
  resetPasswordExpires_lt?: String;
  resetPasswordExpires_lte?: String;
  resetPasswordExpires_gt?: String;
  resetPasswordExpires_gte?: String;
  resetPasswordExpires_contains?: String;
  resetPasswordExpires_not_contains?: String;
  resetPasswordExpires_starts_with?: String;
  resetPasswordExpires_not_starts_with?: String;
  resetPasswordExpires_ends_with?: String;
  resetPasswordExpires_not_ends_with?: String;
  securityQuestions_every?: SecurityQuestionAnswerWhereInput;
  securityQuestions_some?: SecurityQuestionAnswerWhereInput;
  securityQuestions_none?: SecurityQuestionAnswerWhereInput;
  loginAttempts?: Int;
  loginAttempts_not?: Int;
  loginAttempts_in?: Int[] | Int;
  loginAttempts_not_in?: Int[] | Int;
  loginAttempts_lt?: Int;
  loginAttempts_lte?: Int;
  loginAttempts_gt?: Int;
  loginAttempts_gte?: Int;
  securityQuestionAttempts?: Int;
  securityQuestionAttempts_not?: Int;
  securityQuestionAttempts_in?: Int[] | Int;
  securityQuestionAttempts_not_in?: Int[] | Int;
  securityQuestionAttempts_lt?: Int;
  securityQuestionAttempts_lte?: Int;
  securityQuestionAttempts_gt?: Int;
  securityQuestionAttempts_gte?: Int;
  lastVisit?: DateTimeInput;
  lastVisit_not?: DateTimeInput;
  lastVisit_in?: DateTimeInput[] | DateTimeInput;
  lastVisit_not_in?: DateTimeInput[] | DateTimeInput;
  lastVisit_lt?: DateTimeInput;
  lastVisit_lte?: DateTimeInput;
  lastVisit_gt?: DateTimeInput;
  lastVisit_gte?: DateTimeInput;
  ip?: String;
  ip_not?: String;
  ip_in?: String[] | String;
  ip_not_in?: String[] | String;
  ip_lt?: String;
  ip_lte?: String;
  ip_gt?: String;
  ip_gte?: String;
  ip_contains?: String;
  ip_not_contains?: String;
  ip_starts_with?: String;
  ip_not_starts_with?: String;
  ip_ends_with?: String;
  ip_not_ends_with?: String;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  deletedAt?: DateTimeInput;
  deletedAt_not?: DateTimeInput;
  deletedAt_in?: DateTimeInput[] | DateTimeInput;
  deletedAt_not_in?: DateTimeInput[] | DateTimeInput;
  deletedAt_lt?: DateTimeInput;
  deletedAt_lte?: DateTimeInput;
  deletedAt_gt?: DateTimeInput;
  deletedAt_gte?: DateTimeInput;
  AND?: UserAccountWhereInput[] | UserAccountWhereInput;
  OR?: UserAccountWhereInput[] | UserAccountWhereInput;
  NOT?: UserAccountWhereInput[] | UserAccountWhereInput;
}

export interface SecurityQuestionUpdateInput {
  shortName?: String;
  question?: String;
}

export interface SecurityQuestionAnswerUpdateManyWithWhereNestedInput {
  where: SecurityQuestionAnswerScalarWhereInput;
  data: SecurityQuestionAnswerUpdateManyDataInput;
}

export interface SecurityQuestionUpdateManyMutationInput {
  shortName?: String;
  question?: String;
}

export interface SecurityQuestionAnswerUpsertWithWhereUniqueWithoutUserAccountInput {
  where: SecurityQuestionAnswerWhereUniqueInput;
  update: SecurityQuestionAnswerUpdateWithoutUserAccountDataInput;
  create: SecurityQuestionAnswerCreateWithoutUserAccountInput;
}

export interface SecurityQuestionAnswerCreateInput {
  userAccount: UserAccountCreateOneWithoutSecurityQuestionsInput;
  userSecurityQuestion: SecurityQuestionCreateOneInput;
  answer: String;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  email?: String;
}>;

export interface UserAccountCreateOneWithoutSecurityQuestionsInput {
  create?: UserAccountCreateWithoutSecurityQuestionsInput;
  connect?: UserAccountWhereUniqueInput;
}

export interface SecurityQuestionAnswerUpdateManyWithoutUserAccountInput {
  create?:
    | SecurityQuestionAnswerCreateWithoutUserAccountInput[]
    | SecurityQuestionAnswerCreateWithoutUserAccountInput;
  delete?:
    | SecurityQuestionAnswerWhereUniqueInput[]
    | SecurityQuestionAnswerWhereUniqueInput;
  connect?:
    | SecurityQuestionAnswerWhereUniqueInput[]
    | SecurityQuestionAnswerWhereUniqueInput;
  set?:
    | SecurityQuestionAnswerWhereUniqueInput[]
    | SecurityQuestionAnswerWhereUniqueInput;
  disconnect?:
    | SecurityQuestionAnswerWhereUniqueInput[]
    | SecurityQuestionAnswerWhereUniqueInput;
  update?:
    | SecurityQuestionAnswerUpdateWithWhereUniqueWithoutUserAccountInput[]
    | SecurityQuestionAnswerUpdateWithWhereUniqueWithoutUserAccountInput;
  upsert?:
    | SecurityQuestionAnswerUpsertWithWhereUniqueWithoutUserAccountInput[]
    | SecurityQuestionAnswerUpsertWithWhereUniqueWithoutUserAccountInput;
  deleteMany?:
    | SecurityQuestionAnswerScalarWhereInput[]
    | SecurityQuestionAnswerScalarWhereInput;
  updateMany?:
    | SecurityQuestionAnswerUpdateManyWithWhereNestedInput[]
    | SecurityQuestionAnswerUpdateManyWithWhereNestedInput;
}

export interface UserAccountCreateWithoutSecurityQuestionsInput {
  user: UserCreateOneWithoutUserAccountInput;
  confirmed?: Boolean;
  confirmedCode?: Int;
  confirmedExpires?: String;
  locked?: Boolean;
  lockedCode?: Int;
  lockedExpires?: String;
  resetPasswordCode?: Int;
  resetPasswordExpires?: String;
  loginAttempts?: Int;
  securityQuestionAttempts?: Int;
  lastVisit?: DateTimeInput;
  ip?: String;
  deletedAt?: DateTimeInput;
}

export interface UserAccountUpdateOneRequiredWithoutUserInput {
  create?: UserAccountCreateWithoutUserInput;
  update?: UserAccountUpdateWithoutUserDataInput;
  upsert?: UserAccountUpsertWithoutUserInput;
  connect?: UserAccountWhereUniqueInput;
}

export interface UserCreateInput {
  role: RoleCreateOneInput;
  userAccount: UserAccountCreateOneWithoutUserInput;
  firstName?: String;
  lastName?: String;
  email: String;
  password: String;
  phoneCountryCode?: String;
  phone?: String;
  deletedAt?: DateTimeInput;
}

export interface RoleWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: RoleName;
  name_not?: RoleName;
  name_in?: RoleName[] | RoleName;
  name_not_in?: RoleName[] | RoleName;
  AND?: RoleWhereInput[] | RoleWhereInput;
  OR?: RoleWhereInput[] | RoleWhereInput;
  NOT?: RoleWhereInput[] | RoleWhereInput;
}

export interface UserCreateWithoutUserAccountInput {
  role: RoleCreateOneInput;
  firstName?: String;
  lastName?: String;
  email: String;
  password: String;
  phoneCountryCode?: String;
  phone?: String;
  deletedAt?: DateTimeInput;
}

export interface UserAccountSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserAccountWhereInput;
  AND?: UserAccountSubscriptionWhereInput[] | UserAccountSubscriptionWhereInput;
  OR?: UserAccountSubscriptionWhereInput[] | UserAccountSubscriptionWhereInput;
  NOT?: UserAccountSubscriptionWhereInput[] | UserAccountSubscriptionWhereInput;
}

export interface RoleCreateOneInput {
  create?: RoleCreateInput;
  connect?: RoleWhereUniqueInput;
}

export interface SecurityQuestionWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  shortName?: String;
  shortName_not?: String;
  shortName_in?: String[] | String;
  shortName_not_in?: String[] | String;
  shortName_lt?: String;
  shortName_lte?: String;
  shortName_gt?: String;
  shortName_gte?: String;
  shortName_contains?: String;
  shortName_not_contains?: String;
  shortName_starts_with?: String;
  shortName_not_starts_with?: String;
  shortName_ends_with?: String;
  shortName_not_ends_with?: String;
  question?: String;
  question_not?: String;
  question_in?: String[] | String;
  question_not_in?: String[] | String;
  question_lt?: String;
  question_lte?: String;
  question_gt?: String;
  question_gte?: String;
  question_contains?: String;
  question_not_contains?: String;
  question_starts_with?: String;
  question_not_starts_with?: String;
  question_ends_with?: String;
  question_not_ends_with?: String;
  AND?: SecurityQuestionWhereInput[] | SecurityQuestionWhereInput;
  OR?: SecurityQuestionWhereInput[] | SecurityQuestionWhereInput;
  NOT?: SecurityQuestionWhereInput[] | SecurityQuestionWhereInput;
}

export interface SecurityQuestionCreateOneInput {
  create?: SecurityQuestionCreateInput;
  connect?: SecurityQuestionWhereUniqueInput;
}

export interface UserAccountUpdateInput {
  user?: UserUpdateOneRequiredWithoutUserAccountInput;
  confirmed?: Boolean;
  confirmedCode?: Int;
  confirmedExpires?: String;
  locked?: Boolean;
  lockedCode?: Int;
  lockedExpires?: String;
  resetPasswordCode?: Int;
  resetPasswordExpires?: String;
  securityQuestions?: SecurityQuestionAnswerUpdateManyWithoutUserAccountInput;
  loginAttempts?: Int;
  securityQuestionAttempts?: Int;
  lastVisit?: DateTimeInput;
  ip?: String;
  deletedAt?: DateTimeInput;
}

export interface SecurityQuestionAnswerUpdateManyMutationInput {
  answer?: String;
}

export interface UserAccountUpsertWithoutUserInput {
  update: UserAccountUpdateWithoutUserDataInput;
  create: UserAccountCreateWithoutUserInput;
}

export interface UserAccountUpdateOneRequiredWithoutSecurityQuestionsInput {
  create?: UserAccountCreateWithoutSecurityQuestionsInput;
  update?: UserAccountUpdateWithoutSecurityQuestionsDataInput;
  upsert?: UserAccountUpsertWithoutSecurityQuestionsInput;
  connect?: UserAccountWhereUniqueInput;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  role?: RoleWhereInput;
  userAccount?: UserAccountWhereInput;
  firstName?: String;
  firstName_not?: String;
  firstName_in?: String[] | String;
  firstName_not_in?: String[] | String;
  firstName_lt?: String;
  firstName_lte?: String;
  firstName_gt?: String;
  firstName_gte?: String;
  firstName_contains?: String;
  firstName_not_contains?: String;
  firstName_starts_with?: String;
  firstName_not_starts_with?: String;
  firstName_ends_with?: String;
  firstName_not_ends_with?: String;
  lastName?: String;
  lastName_not?: String;
  lastName_in?: String[] | String;
  lastName_not_in?: String[] | String;
  lastName_lt?: String;
  lastName_lte?: String;
  lastName_gt?: String;
  lastName_gte?: String;
  lastName_contains?: String;
  lastName_not_contains?: String;
  lastName_starts_with?: String;
  lastName_not_starts_with?: String;
  lastName_ends_with?: String;
  lastName_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  phoneCountryCode?: String;
  phoneCountryCode_not?: String;
  phoneCountryCode_in?: String[] | String;
  phoneCountryCode_not_in?: String[] | String;
  phoneCountryCode_lt?: String;
  phoneCountryCode_lte?: String;
  phoneCountryCode_gt?: String;
  phoneCountryCode_gte?: String;
  phoneCountryCode_contains?: String;
  phoneCountryCode_not_contains?: String;
  phoneCountryCode_starts_with?: String;
  phoneCountryCode_not_starts_with?: String;
  phoneCountryCode_ends_with?: String;
  phoneCountryCode_not_ends_with?: String;
  phone?: String;
  phone_not?: String;
  phone_in?: String[] | String;
  phone_not_in?: String[] | String;
  phone_lt?: String;
  phone_lte?: String;
  phone_gt?: String;
  phone_gte?: String;
  phone_contains?: String;
  phone_not_contains?: String;
  phone_starts_with?: String;
  phone_not_starts_with?: String;
  phone_ends_with?: String;
  phone_not_ends_with?: String;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  deletedAt?: DateTimeInput;
  deletedAt_not?: DateTimeInput;
  deletedAt_in?: DateTimeInput[] | DateTimeInput;
  deletedAt_not_in?: DateTimeInput[] | DateTimeInput;
  deletedAt_lt?: DateTimeInput;
  deletedAt_lte?: DateTimeInput;
  deletedAt_gt?: DateTimeInput;
  deletedAt_gte?: DateTimeInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface UserAccountUpdateWithoutSecurityQuestionsDataInput {
  user?: UserUpdateOneRequiredWithoutUserAccountInput;
  confirmed?: Boolean;
  confirmedCode?: Int;
  confirmedExpires?: String;
  locked?: Boolean;
  lockedCode?: Int;
  lockedExpires?: String;
  resetPasswordCode?: Int;
  resetPasswordExpires?: String;
  loginAttempts?: Int;
  securityQuestionAttempts?: Int;
  lastVisit?: DateTimeInput;
  ip?: String;
  deletedAt?: DateTimeInput;
}

export interface SecurityQuestionAnswerUpdateWithoutUserAccountDataInput {
  userSecurityQuestion?: SecurityQuestionUpdateOneRequiredInput;
  answer?: String;
}

export interface UserUpdateOneRequiredWithoutUserAccountInput {
  create?: UserCreateWithoutUserAccountInput;
  update?: UserUpdateWithoutUserAccountDataInput;
  upsert?: UserUpsertWithoutUserAccountInput;
  connect?: UserWhereUniqueInput;
}

export interface UserAccountUpdateWithoutUserDataInput {
  confirmed?: Boolean;
  confirmedCode?: Int;
  confirmedExpires?: String;
  locked?: Boolean;
  lockedCode?: Int;
  lockedExpires?: String;
  resetPasswordCode?: Int;
  resetPasswordExpires?: String;
  securityQuestions?: SecurityQuestionAnswerUpdateManyWithoutUserAccountInput;
  loginAttempts?: Int;
  securityQuestionAttempts?: Int;
  lastVisit?: DateTimeInput;
  ip?: String;
  deletedAt?: DateTimeInput;
}

export interface UserUpdateWithoutUserAccountDataInput {
  role?: RoleUpdateOneRequiredInput;
  firstName?: String;
  lastName?: String;
  email?: String;
  password?: String;
  phoneCountryCode?: String;
  phone?: String;
  deletedAt?: DateTimeInput;
}

export interface UserUpdateInput {
  role?: RoleUpdateOneRequiredInput;
  userAccount?: UserAccountUpdateOneRequiredWithoutUserInput;
  firstName?: String;
  lastName?: String;
  email?: String;
  password?: String;
  phoneCountryCode?: String;
  phone?: String;
  deletedAt?: DateTimeInput;
}

export interface RoleUpdateOneRequiredInput {
  create?: RoleCreateInput;
  update?: RoleUpdateDataInput;
  upsert?: RoleUpsertNestedInput;
  connect?: RoleWhereUniqueInput;
}

export interface RoleSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: RoleWhereInput;
  AND?: RoleSubscriptionWhereInput[] | RoleSubscriptionWhereInput;
  OR?: RoleSubscriptionWhereInput[] | RoleSubscriptionWhereInput;
  NOT?: RoleSubscriptionWhereInput[] | RoleSubscriptionWhereInput;
}

export interface RoleUpdateDataInput {
  name?: RoleName;
}

export interface SecurityQuestionAnswerWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  userAccount?: UserAccountWhereInput;
  userSecurityQuestion?: SecurityQuestionWhereInput;
  answer?: String;
  answer_not?: String;
  answer_in?: String[] | String;
  answer_not_in?: String[] | String;
  answer_lt?: String;
  answer_lte?: String;
  answer_gt?: String;
  answer_gte?: String;
  answer_contains?: String;
  answer_not_contains?: String;
  answer_starts_with?: String;
  answer_not_starts_with?: String;
  answer_ends_with?: String;
  answer_not_ends_with?: String;
  AND?: SecurityQuestionAnswerWhereInput[] | SecurityQuestionAnswerWhereInput;
  OR?: SecurityQuestionAnswerWhereInput[] | SecurityQuestionAnswerWhereInput;
  NOT?: SecurityQuestionAnswerWhereInput[] | SecurityQuestionAnswerWhereInput;
}

export interface RoleUpsertNestedInput {
  update: RoleUpdateDataInput;
  create: RoleCreateInput;
}

export interface SecurityQuestionAnswerUpdateWithWhereUniqueWithoutUserAccountInput {
  where: SecurityQuestionAnswerWhereUniqueInput;
  data: SecurityQuestionAnswerUpdateWithoutUserAccountDataInput;
}

export interface SecurityQuestionUpdateDataInput {
  shortName?: String;
  question?: String;
}

export interface SecurityQuestionUpdateOneRequiredInput {
  create?: SecurityQuestionCreateInput;
  update?: SecurityQuestionUpdateDataInput;
  upsert?: SecurityQuestionUpsertNestedInput;
  connect?: SecurityQuestionWhereUniqueInput;
}

export interface UserAccountUpsertWithoutSecurityQuestionsInput {
  update: UserAccountUpdateWithoutSecurityQuestionsDataInput;
  create: UserAccountCreateWithoutSecurityQuestionsInput;
}

export interface UserUpsertWithoutUserAccountInput {
  update: UserUpdateWithoutUserAccountDataInput;
  create: UserCreateWithoutUserAccountInput;
}

export type UserAccountWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  confirmedCode?: Int;
  lockedCode?: Int;
  resetPasswordCode?: Int;
}>;

export interface SecurityQuestionAnswerScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  answer?: String;
  answer_not?: String;
  answer_in?: String[] | String;
  answer_not_in?: String[] | String;
  answer_lt?: String;
  answer_lte?: String;
  answer_gt?: String;
  answer_gte?: String;
  answer_contains?: String;
  answer_not_contains?: String;
  answer_starts_with?: String;
  answer_not_starts_with?: String;
  answer_ends_with?: String;
  answer_not_ends_with?: String;
  AND?:
    | SecurityQuestionAnswerScalarWhereInput[]
    | SecurityQuestionAnswerScalarWhereInput;
  OR?:
    | SecurityQuestionAnswerScalarWhereInput[]
    | SecurityQuestionAnswerScalarWhereInput;
  NOT?:
    | SecurityQuestionAnswerScalarWhereInput[]
    | SecurityQuestionAnswerScalarWhereInput;
}

export interface UserAccountCreateInput {
  user: UserCreateOneWithoutUserAccountInput;
  confirmed?: Boolean;
  confirmedCode?: Int;
  confirmedExpires?: String;
  locked?: Boolean;
  lockedCode?: Int;
  lockedExpires?: String;
  resetPasswordCode?: Int;
  resetPasswordExpires?: String;
  securityQuestions?: SecurityQuestionAnswerCreateManyWithoutUserAccountInput;
  loginAttempts?: Int;
  securityQuestionAttempts?: Int;
  lastVisit?: DateTimeInput;
  ip?: String;
  deletedAt?: DateTimeInput;
}

export type SecurityQuestionWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  shortName?: String;
}>;

export interface NodeNode {
  id: ID_Output;
}

export interface UserAccountPreviousValues {
  id: ID_Output;
  confirmed: Boolean;
  confirmedCode?: Int;
  confirmedExpires?: String;
  locked: Boolean;
  lockedCode?: Int;
  lockedExpires?: String;
  resetPasswordCode?: Int;
  resetPasswordExpires?: String;
  loginAttempts: Int;
  securityQuestionAttempts: Int;
  lastVisit?: DateTimeOutput;
  ip?: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
  deletedAt?: DateTimeOutput;
}

export interface UserAccountPreviousValuesPromise
  extends Promise<UserAccountPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  confirmed: () => Promise<Boolean>;
  confirmedCode: () => Promise<Int>;
  confirmedExpires: () => Promise<String>;
  locked: () => Promise<Boolean>;
  lockedCode: () => Promise<Int>;
  lockedExpires: () => Promise<String>;
  resetPasswordCode: () => Promise<Int>;
  resetPasswordExpires: () => Promise<String>;
  loginAttempts: () => Promise<Int>;
  securityQuestionAttempts: () => Promise<Int>;
  lastVisit: () => Promise<DateTimeOutput>;
  ip: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  deletedAt: () => Promise<DateTimeOutput>;
}

export interface UserAccountPreviousValuesSubscription
  extends Promise<AsyncIterator<UserAccountPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  confirmed: () => Promise<AsyncIterator<Boolean>>;
  confirmedCode: () => Promise<AsyncIterator<Int>>;
  confirmedExpires: () => Promise<AsyncIterator<String>>;
  locked: () => Promise<AsyncIterator<Boolean>>;
  lockedCode: () => Promise<AsyncIterator<Int>>;
  lockedExpires: () => Promise<AsyncIterator<String>>;
  resetPasswordCode: () => Promise<AsyncIterator<Int>>;
  resetPasswordExpires: () => Promise<AsyncIterator<String>>;
  loginAttempts: () => Promise<AsyncIterator<Int>>;
  securityQuestionAttempts: () => Promise<AsyncIterator<Int>>;
  lastVisit: () => Promise<AsyncIterator<DateTimeOutput>>;
  ip: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  deletedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface SecurityQuestionAnswer {
  id: ID_Output;
  answer: String;
}

export interface SecurityQuestionAnswerPromise
  extends Promise<SecurityQuestionAnswer>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  userAccount: <T = UserAccountPromise>() => T;
  userSecurityQuestion: <T = SecurityQuestionPromise>() => T;
  answer: () => Promise<String>;
}

export interface SecurityQuestionAnswerSubscription
  extends Promise<AsyncIterator<SecurityQuestionAnswer>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  userAccount: <T = UserAccountSubscription>() => T;
  userSecurityQuestion: <T = SecurityQuestionSubscription>() => T;
  answer: () => Promise<AsyncIterator<String>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface UserAccount {
  id: ID_Output;
  confirmed: Boolean;
  confirmedCode?: Int;
  confirmedExpires?: String;
  locked: Boolean;
  lockedCode?: Int;
  lockedExpires?: String;
  resetPasswordCode?: Int;
  resetPasswordExpires?: String;
  loginAttempts: Int;
  securityQuestionAttempts: Int;
  lastVisit?: DateTimeOutput;
  ip?: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
  deletedAt?: DateTimeOutput;
}

export interface UserAccountPromise extends Promise<UserAccount>, Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  confirmed: () => Promise<Boolean>;
  confirmedCode: () => Promise<Int>;
  confirmedExpires: () => Promise<String>;
  locked: () => Promise<Boolean>;
  lockedCode: () => Promise<Int>;
  lockedExpires: () => Promise<String>;
  resetPasswordCode: () => Promise<Int>;
  resetPasswordExpires: () => Promise<String>;
  securityQuestions: <T = FragmentableArray<SecurityQuestionAnswer>>(
    args?: {
      where?: SecurityQuestionAnswerWhereInput;
      orderBy?: SecurityQuestionAnswerOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  loginAttempts: () => Promise<Int>;
  securityQuestionAttempts: () => Promise<Int>;
  lastVisit: () => Promise<DateTimeOutput>;
  ip: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  deletedAt: () => Promise<DateTimeOutput>;
}

export interface UserAccountSubscription
  extends Promise<AsyncIterator<UserAccount>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  confirmed: () => Promise<AsyncIterator<Boolean>>;
  confirmedCode: () => Promise<AsyncIterator<Int>>;
  confirmedExpires: () => Promise<AsyncIterator<String>>;
  locked: () => Promise<AsyncIterator<Boolean>>;
  lockedCode: () => Promise<AsyncIterator<Int>>;
  lockedExpires: () => Promise<AsyncIterator<String>>;
  resetPasswordCode: () => Promise<AsyncIterator<Int>>;
  resetPasswordExpires: () => Promise<AsyncIterator<String>>;
  securityQuestions: <
    T = Promise<AsyncIterator<SecurityQuestionAnswerSubscription>>
  >(
    args?: {
      where?: SecurityQuestionAnswerWhereInput;
      orderBy?: SecurityQuestionAnswerOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  loginAttempts: () => Promise<AsyncIterator<Int>>;
  securityQuestionAttempts: () => Promise<AsyncIterator<Int>>;
  lastVisit: () => Promise<AsyncIterator<DateTimeOutput>>;
  ip: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  deletedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AggregateRole {
  count: Int;
}

export interface AggregateRolePromise
  extends Promise<AggregateRole>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateRoleSubscription
  extends Promise<AsyncIterator<AggregateRole>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface AggregateSecurityQuestion {
  count: Int;
}

export interface AggregateSecurityQuestionPromise
  extends Promise<AggregateSecurityQuestion>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSecurityQuestionSubscription
  extends Promise<AsyncIterator<AggregateSecurityQuestion>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface UserAccountEdge {
  node: UserAccount;
  cursor: String;
}

export interface UserAccountEdgePromise
  extends Promise<UserAccountEdge>,
    Fragmentable {
  node: <T = UserAccountPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserAccountEdgeSubscription
  extends Promise<AsyncIterator<UserAccountEdge>>,
    Fragmentable {
  node: <T = UserAccountSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface SecurityQuestionEdge {
  node: SecurityQuestion;
  cursor: String;
}

export interface SecurityQuestionEdgePromise
  extends Promise<SecurityQuestionEdge>,
    Fragmentable {
  node: <T = SecurityQuestionPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SecurityQuestionEdgeSubscription
  extends Promise<AsyncIterator<SecurityQuestionEdge>>,
    Fragmentable {
  node: <T = SecurityQuestionSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SecurityQuestionConnection {
  pageInfo: PageInfo;
  edges: SecurityQuestionEdge[];
}

export interface SecurityQuestionConnectionPromise
  extends Promise<SecurityQuestionConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SecurityQuestionEdge>>() => T;
  aggregate: <T = AggregateSecurityQuestionPromise>() => T;
}

export interface SecurityQuestionConnectionSubscription
  extends Promise<AsyncIterator<SecurityQuestionConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SecurityQuestionEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSecurityQuestionSubscription>() => T;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface Role {
  id: ID_Output;
  name: RoleName;
}

export interface RolePromise extends Promise<Role>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<RoleName>;
}

export interface RoleSubscription
  extends Promise<AsyncIterator<Role>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<RoleName>>;
}

export interface AggregateSecurityQuestionAnswer {
  count: Int;
}

export interface AggregateSecurityQuestionAnswerPromise
  extends Promise<AggregateSecurityQuestionAnswer>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSecurityQuestionAnswerSubscription
  extends Promise<AsyncIterator<AggregateSecurityQuestionAnswer>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface RoleSubscriptionPayload {
  mutation: MutationType;
  node: Role;
  updatedFields: String[];
  previousValues: RolePreviousValues;
}

export interface RoleSubscriptionPayloadPromise
  extends Promise<RoleSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = RolePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = RolePreviousValuesPromise>() => T;
}

export interface RoleSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<RoleSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = RoleSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = RolePreviousValuesSubscription>() => T;
}

export interface SecurityQuestionAnswerConnection {
  pageInfo: PageInfo;
  edges: SecurityQuestionAnswerEdge[];
}

export interface SecurityQuestionAnswerConnectionPromise
  extends Promise<SecurityQuestionAnswerConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SecurityQuestionAnswerEdge>>() => T;
  aggregate: <T = AggregateSecurityQuestionAnswerPromise>() => T;
}

export interface SecurityQuestionAnswerConnectionSubscription
  extends Promise<AsyncIterator<SecurityQuestionAnswerConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<SecurityQuestionAnswerEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateSecurityQuestionAnswerSubscription>() => T;
}

export interface RolePreviousValues {
  id: ID_Output;
  name: RoleName;
}

export interface RolePreviousValuesPromise
  extends Promise<RolePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<RoleName>;
}

export interface RolePreviousValuesSubscription
  extends Promise<AsyncIterator<RolePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<RoleName>>;
}

export interface UserPreviousValues {
  id: ID_Output;
  firstName?: String;
  lastName?: String;
  email: String;
  password: String;
  phoneCountryCode?: String;
  phone?: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
  deletedAt?: DateTimeOutput;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  phoneCountryCode: () => Promise<String>;
  phone: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  deletedAt: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  phoneCountryCode: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  deletedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface RoleConnection {
  pageInfo: PageInfo;
  edges: RoleEdge[];
}

export interface RoleConnectionPromise
  extends Promise<RoleConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<RoleEdge>>() => T;
  aggregate: <T = AggregateRolePromise>() => T;
}

export interface RoleConnectionSubscription
  extends Promise<AsyncIterator<RoleConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<RoleEdgeSubscription>>>() => T;
  aggregate: <T = AggregateRoleSubscription>() => T;
}

export interface AggregateUserAccount {
  count: Int;
}

export interface AggregateUserAccountPromise
  extends Promise<AggregateUserAccount>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserAccountSubscription
  extends Promise<AsyncIterator<AggregateUserAccount>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SecurityQuestionSubscriptionPayload {
  mutation: MutationType;
  node: SecurityQuestion;
  updatedFields: String[];
  previousValues: SecurityQuestionPreviousValues;
}

export interface SecurityQuestionSubscriptionPayloadPromise
  extends Promise<SecurityQuestionSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SecurityQuestionPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SecurityQuestionPreviousValuesPromise>() => T;
}

export interface SecurityQuestionSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SecurityQuestionSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SecurityQuestionSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SecurityQuestionPreviousValuesSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface SecurityQuestionAnswerEdge {
  node: SecurityQuestionAnswer;
  cursor: String;
}

export interface SecurityQuestionAnswerEdgePromise
  extends Promise<SecurityQuestionAnswerEdge>,
    Fragmentable {
  node: <T = SecurityQuestionAnswerPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SecurityQuestionAnswerEdgeSubscription
  extends Promise<AsyncIterator<SecurityQuestionAnswerEdge>>,
    Fragmentable {
  node: <T = SecurityQuestionAnswerSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface SecurityQuestionAnswerPreviousValues {
  id: ID_Output;
  answer: String;
}

export interface SecurityQuestionAnswerPreviousValuesPromise
  extends Promise<SecurityQuestionAnswerPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  answer: () => Promise<String>;
}

export interface SecurityQuestionAnswerPreviousValuesSubscription
  extends Promise<AsyncIterator<SecurityQuestionAnswerPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  answer: () => Promise<AsyncIterator<String>>;
}

export interface SecurityQuestionAnswerSubscriptionPayload {
  mutation: MutationType;
  node: SecurityQuestionAnswer;
  updatedFields: String[];
  previousValues: SecurityQuestionAnswerPreviousValues;
}

export interface SecurityQuestionAnswerSubscriptionPayloadPromise
  extends Promise<SecurityQuestionAnswerSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SecurityQuestionAnswerPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SecurityQuestionAnswerPreviousValuesPromise>() => T;
}

export interface SecurityQuestionAnswerSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SecurityQuestionAnswerSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SecurityQuestionAnswerSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SecurityQuestionAnswerPreviousValuesSubscription>() => T;
}

export interface SecurityQuestion {
  id: ID_Output;
  shortName: String;
  question: String;
}

export interface SecurityQuestionPromise
  extends Promise<SecurityQuestion>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  shortName: () => Promise<String>;
  question: () => Promise<String>;
}

export interface SecurityQuestionSubscription
  extends Promise<AsyncIterator<SecurityQuestion>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  shortName: () => Promise<AsyncIterator<String>>;
  question: () => Promise<AsyncIterator<String>>;
}

export interface SecurityQuestionPreviousValues {
  id: ID_Output;
  shortName: String;
  question: String;
}

export interface SecurityQuestionPreviousValuesPromise
  extends Promise<SecurityQuestionPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  shortName: () => Promise<String>;
  question: () => Promise<String>;
}

export interface SecurityQuestionPreviousValuesSubscription
  extends Promise<AsyncIterator<SecurityQuestionPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  shortName: () => Promise<AsyncIterator<String>>;
  question: () => Promise<AsyncIterator<String>>;
}

export interface RoleEdge {
  node: Role;
  cursor: String;
}

export interface RoleEdgePromise extends Promise<RoleEdge>, Fragmentable {
  node: <T = RolePromise>() => T;
  cursor: () => Promise<String>;
}

export interface RoleEdgeSubscription
  extends Promise<AsyncIterator<RoleEdge>>,
    Fragmentable {
  node: <T = RoleSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserAccountSubscriptionPayload {
  mutation: MutationType;
  node: UserAccount;
  updatedFields: String[];
  previousValues: UserAccountPreviousValues;
}

export interface UserAccountSubscriptionPayloadPromise
  extends Promise<UserAccountSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserAccountPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserAccountPreviousValuesPromise>() => T;
}

export interface UserAccountSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserAccountSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserAccountSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserAccountPreviousValuesSubscription>() => T;
}

export interface UserAccountConnection {
  pageInfo: PageInfo;
  edges: UserAccountEdge[];
}

export interface UserAccountConnectionPromise
  extends Promise<UserAccountConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserAccountEdge>>() => T;
  aggregate: <T = AggregateUserAccountPromise>() => T;
}

export interface UserAccountConnectionSubscription
  extends Promise<AsyncIterator<UserAccountConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserAccountEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserAccountSubscription>() => T;
}

export interface User {
  id: ID_Output;
  firstName?: String;
  lastName?: String;
  email: String;
  password: String;
  phoneCountryCode?: String;
  phone?: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
  deletedAt?: DateTimeOutput;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  role: <T = RolePromise>() => T;
  userAccount: <T = UserAccountPromise>() => T;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  phoneCountryCode: () => Promise<String>;
  phone: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  deletedAt: () => Promise<DateTimeOutput>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  role: <T = RoleSubscription>() => T;
  userAccount: <T = UserAccountSubscription>() => T;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  phoneCountryCode: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  deletedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: 'Role',
    embedded: false,
  },
  {
    name: 'RoleName',
    embedded: false,
  },
  {
    name: 'User',
    embedded: false,
  },
  {
    name: 'UserAccount',
    embedded: false,
  },
  {
    name: 'SecurityQuestion',
    embedded: false,
  },
  {
    name: 'SecurityQuestionAnswer',
    embedded: false,
  },
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `http://localhost:4466`,
});
export const prisma = new Prisma();
