// Code generated by Prisma (prisma@1.30.0). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type AggregateRole {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateUserAccount {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

scalar Long

type Mutation {
  createRole(data: RoleCreateInput!): Role!
  updateRole(data: RoleUpdateInput!, where: RoleWhereUniqueInput!): Role
  updateManyRoles(data: RoleUpdateManyMutationInput!, where: RoleWhereInput): BatchPayload!
  upsertRole(where: RoleWhereUniqueInput!, create: RoleCreateInput!, update: RoleUpdateInput!): Role!
  deleteRole(where: RoleWhereUniqueInput!): Role
  deleteManyRoles(where: RoleWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  createUserAccount(data: UserAccountCreateInput!): UserAccount!
  updateUserAccount(data: UserAccountUpdateInput!, where: UserAccountWhereUniqueInput!): UserAccount
  updateManyUserAccounts(data: UserAccountUpdateManyMutationInput!, where: UserAccountWhereInput): BatchPayload!
  upsertUserAccount(where: UserAccountWhereUniqueInput!, create: UserAccountCreateInput!, update: UserAccountUpdateInput!): UserAccount!
  deleteUserAccount(where: UserAccountWhereUniqueInput!): UserAccount
  deleteManyUserAccounts(where: UserAccountWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  role(where: RoleWhereUniqueInput!): Role
  roles(where: RoleWhereInput, orderBy: RoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Role]!
  rolesConnection(where: RoleWhereInput, orderBy: RoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RoleConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  userAccount(where: UserAccountWhereUniqueInput!): UserAccount
  userAccounts(where: UserAccountWhereInput, orderBy: UserAccountOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserAccount]!
  userAccountsConnection(where: UserAccountWhereInput, orderBy: UserAccountOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserAccountConnection!
  node(id: ID!): Node
}

type Role {
  id: ID!
  name: RoleName!
}

type RoleConnection {
  pageInfo: PageInfo!
  edges: [RoleEdge]!
  aggregate: AggregateRole!
}

input RoleCreateInput {
  name: RoleName!
}

input RoleCreateOneInput {
  create: RoleCreateInput
  connect: RoleWhereUniqueInput
}

type RoleEdge {
  node: Role!
  cursor: String!
}

enum RoleName {
  USER
}

enum RoleOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type RolePreviousValues {
  id: ID!
  name: RoleName!
}

type RoleSubscriptionPayload {
  mutation: MutationType!
  node: Role
  updatedFields: [String!]
  previousValues: RolePreviousValues
}

input RoleSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: RoleWhereInput
  AND: [RoleSubscriptionWhereInput!]
  OR: [RoleSubscriptionWhereInput!]
  NOT: [RoleSubscriptionWhereInput!]
}

input RoleUpdateDataInput {
  name: RoleName
}

input RoleUpdateInput {
  name: RoleName
}

input RoleUpdateManyMutationInput {
  name: RoleName
}

input RoleUpdateOneRequiredInput {
  create: RoleCreateInput
  update: RoleUpdateDataInput
  upsert: RoleUpsertNestedInput
  connect: RoleWhereUniqueInput
}

input RoleUpsertNestedInput {
  update: RoleUpdateDataInput!
  create: RoleCreateInput!
}

input RoleWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: RoleName
  name_not: RoleName
  name_in: [RoleName!]
  name_not_in: [RoleName!]
  AND: [RoleWhereInput!]
  OR: [RoleWhereInput!]
  NOT: [RoleWhereInput!]
}

input RoleWhereUniqueInput {
  id: ID
}

type Subscription {
  role(where: RoleSubscriptionWhereInput): RoleSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  userAccount(where: UserAccountSubscriptionWhereInput): UserAccountSubscriptionPayload
}

type User {
  id: ID!
  role: Role!
  userAccount: UserAccount!
  firstName: String
  lastName: String
  email: String!
  password: String!
  phoneCountryCode: String
  phone: String
  updatedAt: DateTime!
  createdAt: DateTime!
  deletedAt: DateTime
}

type UserAccount {
  id: ID!
  user: User!
  confirmed: Boolean!
  confirmedToken: String
  confirmedExpires: String
  locked: Boolean!
  lockedToken: String
  lockedExpires: String
  updatedAt: DateTime!
  createdAt: DateTime!
  deletedAt: DateTime
}

type UserAccountConnection {
  pageInfo: PageInfo!
  edges: [UserAccountEdge]!
  aggregate: AggregateUserAccount!
}

input UserAccountCreateInput {
  user: UserCreateOneWithoutUserAccountInput!
  confirmed: Boolean
  confirmedToken: String
  confirmedExpires: String
  locked: Boolean
  lockedToken: String
  lockedExpires: String
  deletedAt: DateTime
}

input UserAccountCreateOneWithoutUserInput {
  create: UserAccountCreateWithoutUserInput
  connect: UserAccountWhereUniqueInput
}

input UserAccountCreateWithoutUserInput {
  confirmed: Boolean
  confirmedToken: String
  confirmedExpires: String
  locked: Boolean
  lockedToken: String
  lockedExpires: String
  deletedAt: DateTime
}

type UserAccountEdge {
  node: UserAccount!
  cursor: String!
}

enum UserAccountOrderByInput {
  id_ASC
  id_DESC
  confirmed_ASC
  confirmed_DESC
  confirmedToken_ASC
  confirmedToken_DESC
  confirmedExpires_ASC
  confirmedExpires_DESC
  locked_ASC
  locked_DESC
  lockedToken_ASC
  lockedToken_DESC
  lockedExpires_ASC
  lockedExpires_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
  deletedAt_ASC
  deletedAt_DESC
}

type UserAccountPreviousValues {
  id: ID!
  confirmed: Boolean!
  confirmedToken: String
  confirmedExpires: String
  locked: Boolean!
  lockedToken: String
  lockedExpires: String
  updatedAt: DateTime!
  createdAt: DateTime!
  deletedAt: DateTime
}

type UserAccountSubscriptionPayload {
  mutation: MutationType!
  node: UserAccount
  updatedFields: [String!]
  previousValues: UserAccountPreviousValues
}

input UserAccountSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserAccountWhereInput
  AND: [UserAccountSubscriptionWhereInput!]
  OR: [UserAccountSubscriptionWhereInput!]
  NOT: [UserAccountSubscriptionWhereInput!]
}

input UserAccountUpdateInput {
  user: UserUpdateOneRequiredWithoutUserAccountInput
  confirmed: Boolean
  confirmedToken: String
  confirmedExpires: String
  locked: Boolean
  lockedToken: String
  lockedExpires: String
  deletedAt: DateTime
}

input UserAccountUpdateManyMutationInput {
  confirmed: Boolean
  confirmedToken: String
  confirmedExpires: String
  locked: Boolean
  lockedToken: String
  lockedExpires: String
  deletedAt: DateTime
}

input UserAccountUpdateOneRequiredWithoutUserInput {
  create: UserAccountCreateWithoutUserInput
  update: UserAccountUpdateWithoutUserDataInput
  upsert: UserAccountUpsertWithoutUserInput
  connect: UserAccountWhereUniqueInput
}

input UserAccountUpdateWithoutUserDataInput {
  confirmed: Boolean
  confirmedToken: String
  confirmedExpires: String
  locked: Boolean
  lockedToken: String
  lockedExpires: String
  deletedAt: DateTime
}

input UserAccountUpsertWithoutUserInput {
  update: UserAccountUpdateWithoutUserDataInput!
  create: UserAccountCreateWithoutUserInput!
}

input UserAccountWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  user: UserWhereInput
  confirmed: Boolean
  confirmed_not: Boolean
  confirmedToken: String
  confirmedToken_not: String
  confirmedToken_in: [String!]
  confirmedToken_not_in: [String!]
  confirmedToken_lt: String
  confirmedToken_lte: String
  confirmedToken_gt: String
  confirmedToken_gte: String
  confirmedToken_contains: String
  confirmedToken_not_contains: String
  confirmedToken_starts_with: String
  confirmedToken_not_starts_with: String
  confirmedToken_ends_with: String
  confirmedToken_not_ends_with: String
  confirmedExpires: String
  confirmedExpires_not: String
  confirmedExpires_in: [String!]
  confirmedExpires_not_in: [String!]
  confirmedExpires_lt: String
  confirmedExpires_lte: String
  confirmedExpires_gt: String
  confirmedExpires_gte: String
  confirmedExpires_contains: String
  confirmedExpires_not_contains: String
  confirmedExpires_starts_with: String
  confirmedExpires_not_starts_with: String
  confirmedExpires_ends_with: String
  confirmedExpires_not_ends_with: String
  locked: Boolean
  locked_not: Boolean
  lockedToken: String
  lockedToken_not: String
  lockedToken_in: [String!]
  lockedToken_not_in: [String!]
  lockedToken_lt: String
  lockedToken_lte: String
  lockedToken_gt: String
  lockedToken_gte: String
  lockedToken_contains: String
  lockedToken_not_contains: String
  lockedToken_starts_with: String
  lockedToken_not_starts_with: String
  lockedToken_ends_with: String
  lockedToken_not_ends_with: String
  lockedExpires: String
  lockedExpires_not: String
  lockedExpires_in: [String!]
  lockedExpires_not_in: [String!]
  lockedExpires_lt: String
  lockedExpires_lte: String
  lockedExpires_gt: String
  lockedExpires_gte: String
  lockedExpires_contains: String
  lockedExpires_not_contains: String
  lockedExpires_starts_with: String
  lockedExpires_not_starts_with: String
  lockedExpires_ends_with: String
  lockedExpires_not_ends_with: String
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  deletedAt: DateTime
  deletedAt_not: DateTime
  deletedAt_in: [DateTime!]
  deletedAt_not_in: [DateTime!]
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  AND: [UserAccountWhereInput!]
  OR: [UserAccountWhereInput!]
  NOT: [UserAccountWhereInput!]
}

input UserAccountWhereUniqueInput {
  id: ID
  confirmedToken: String
  lockedToken: String
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  role: RoleCreateOneInput!
  userAccount: UserAccountCreateOneWithoutUserInput!
  firstName: String
  lastName: String
  email: String!
  password: String!
  phoneCountryCode: String
  phone: String
  deletedAt: DateTime
}

input UserCreateOneWithoutUserAccountInput {
  create: UserCreateWithoutUserAccountInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutUserAccountInput {
  role: RoleCreateOneInput!
  firstName: String
  lastName: String
  email: String!
  password: String!
  phoneCountryCode: String
  phone: String
  deletedAt: DateTime
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  firstName_ASC
  firstName_DESC
  lastName_ASC
  lastName_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  phoneCountryCode_ASC
  phoneCountryCode_DESC
  phone_ASC
  phone_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
  deletedAt_ASC
  deletedAt_DESC
}

type UserPreviousValues {
  id: ID!
  firstName: String
  lastName: String
  email: String!
  password: String!
  phoneCountryCode: String
  phone: String
  updatedAt: DateTime!
  createdAt: DateTime!
  deletedAt: DateTime
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  role: RoleUpdateOneRequiredInput
  userAccount: UserAccountUpdateOneRequiredWithoutUserInput
  firstName: String
  lastName: String
  email: String
  password: String
  phoneCountryCode: String
  phone: String
  deletedAt: DateTime
}

input UserUpdateManyMutationInput {
  firstName: String
  lastName: String
  email: String
  password: String
  phoneCountryCode: String
  phone: String
  deletedAt: DateTime
}

input UserUpdateOneRequiredWithoutUserAccountInput {
  create: UserCreateWithoutUserAccountInput
  update: UserUpdateWithoutUserAccountDataInput
  upsert: UserUpsertWithoutUserAccountInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutUserAccountDataInput {
  role: RoleUpdateOneRequiredInput
  firstName: String
  lastName: String
  email: String
  password: String
  phoneCountryCode: String
  phone: String
  deletedAt: DateTime
}

input UserUpsertWithoutUserAccountInput {
  update: UserUpdateWithoutUserAccountDataInput!
  create: UserCreateWithoutUserAccountInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  role: RoleWhereInput
  userAccount: UserAccountWhereInput
  firstName: String
  firstName_not: String
  firstName_in: [String!]
  firstName_not_in: [String!]
  firstName_lt: String
  firstName_lte: String
  firstName_gt: String
  firstName_gte: String
  firstName_contains: String
  firstName_not_contains: String
  firstName_starts_with: String
  firstName_not_starts_with: String
  firstName_ends_with: String
  firstName_not_ends_with: String
  lastName: String
  lastName_not: String
  lastName_in: [String!]
  lastName_not_in: [String!]
  lastName_lt: String
  lastName_lte: String
  lastName_gt: String
  lastName_gte: String
  lastName_contains: String
  lastName_not_contains: String
  lastName_starts_with: String
  lastName_not_starts_with: String
  lastName_ends_with: String
  lastName_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  phoneCountryCode: String
  phoneCountryCode_not: String
  phoneCountryCode_in: [String!]
  phoneCountryCode_not_in: [String!]
  phoneCountryCode_lt: String
  phoneCountryCode_lte: String
  phoneCountryCode_gt: String
  phoneCountryCode_gte: String
  phoneCountryCode_contains: String
  phoneCountryCode_not_contains: String
  phoneCountryCode_starts_with: String
  phoneCountryCode_not_starts_with: String
  phoneCountryCode_ends_with: String
  phoneCountryCode_not_ends_with: String
  phone: String
  phone_not: String
  phone_in: [String!]
  phone_not_in: [String!]
  phone_lt: String
  phone_lte: String
  phone_gt: String
  phone_gte: String
  phone_contains: String
  phone_not_contains: String
  phone_starts_with: String
  phone_not_starts_with: String
  phone_ends_with: String
  phone_not_ends_with: String
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  deletedAt: DateTime
  deletedAt_not: DateTime
  deletedAt_in: [DateTime!]
  deletedAt_not_in: [DateTime!]
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
`;
